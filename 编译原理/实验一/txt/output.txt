specification( struct$a(  ) struct$b(  )  ) 
specification( module$a( struct$b(  )  ) struct$c(  )  ) 
specification( module$a( struct$b(  ) struct$c(  ) struct$d(  )  )  ) 
specification( struct$a(  )  ) 
specification( struct$a( member$0( scoped_name$int( b )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( b )  ) member$1( scoped_name$int( c )  ) member$2( scoped_name$int( d )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( b )  ) member$1( floating_pt_type$float( c )  )  )  ) 
specification( struct$a( member$0( scoped_name$::ab::cd::ef( b )  ) member$1( scoped_name$gh::ij( c )  )  )  ) 
specification( struct$a( member$0( floating_pt_type$float( b )  ) member$1( scoped_name$int( c )  ) member$2( base_type_spec$char( d )  ) member$3( base_type_spec$string( e )  ) member$4( base_type_spec$boolean( f )  )  )  ) 
specification( struct$a( member$0( floating_pt_type$float( b )  ) member$1( floating_pt_type$double( e )  ) member$2( floating_pt_type$longdouble( f )  )  )  ) 
specification( struct$a( member$0( signed_int$int8( b )  ) member$1( unsigned_int$uint8( e )  )  )  ) 
specification( struct$a( member$0( signed_int$int8( b )  ) member$1( signed_int$longlong( c )  )  )  ) 
specification( struct$a( member$0( unsigned_int$uint8( b )  ) member$1( unsigned_int$unsignedlonglong( c )  )  )  ) 
specification( struct$a( member$0( unsigned_int$uint8( b ) unsigned_int$uint8( c ) unsigned_int$uint8( d )  )  )  ) 
specification( struct$a( member$0( unsigned_int$uint8( b )  ) member$1( scoped_name$int( array_declarator$c( literal$10  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( b ) scoped_name$int( assign( c literal$8  )  ) scoped_name$int( assign( d literal$9  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( array_declarator$b( literal$10 assignArray( literal$1 literal$2 literal$3 literal$4  )  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( array_declarator$b( literal$10 assignArray( +( literal$1  literal$2  ) &( literal$2  literal$3  ) /( literal$3  literal$4  ) *( literal$4  literal$5  ) |( literal$5  literal$6  )  )  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( assign( b |( literal$1  |( literal$2  |( literal$3  |( literal$4  |( literal$5  |( literal$6  literal$0  )  )  )  )  )  )  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( assign( b ^( literal$1  ^( literal$2  ^( literal$3  ^( literal$4  ^( literal$5  ^( literal$6  literal$0  )  )  )  )  )  )  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( assign( b &( literal$1  &( literal$2  &( literal$3  &( literal$4  &( literal$5  &( literal$6  literal$0  )  )  )  )  )  )  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( assign( b <<( literal$1  >>( literal$2  <<( literal$3  <<( literal$4  >>( literal$5  >>( literal$6  literal$0  )  )  )  )  )  )  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( assign( b +( literal$1  -( literal$2  +( literal$3  +( literal$4  -( literal$5  -( literal$6  literal$0  )  )  )  )  )  )  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( assign( b *( literal$1  /( literal$2  %( literal$3  *( literal$4  /( literal$5  %( literal$6  literal$0  )  )  )  )  )  )  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( assign( b -( literal$1  )  )  ) scoped_name$int( assign( c +( literal$2  )  )  ) scoped_name$int( assign( d ~( literal$true  )  )  )  )  )  ) 
specification( struct$a( member$0( scoped_name$int( assign( b -( literal$1  )  )  )  ) member$1( floating_pt_type$float( assign( c literal$1.2e-5  )  )  ) member$2( base_type_spec$string( assign( s literal$"abcd"  )  )  ) member$3( base_type_spec$char( assign( t literal$'a'  )  ) base_type_spec$char( assign( u literal$'\n'  )  )  ) member$4( base_type_spec$boolean( assign( d literal$true  )  )  )  )  ) 
